/*
 * generated by Xtext 2.25.0
 */
package org.xtext.ice.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ice.ide.contentassist.antlr.internal.InternalFsmParser;
import org.xtext.ice.services.FsmGrammarAccess;

public class FsmParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FsmGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FsmGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getFsmAccess().getAlternatives_3(), "rule__Fsm__Alternatives_3");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getFsmAccess().getGroup(), "rule__Fsm__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_3(), "rule__Transition__Group_3__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_4(), "rule__Transition__Group_4__0");
			builder.put(grammarAccess.getFsmAccess().getNameAssignment_2(), "rule__Fsm__NameAssignment_2");
			builder.put(grammarAccess.getFsmAccess().getStateAssignment_3_0(), "rule__Fsm__StateAssignment_3_0");
			builder.put(grammarAccess.getFsmAccess().getTransitionAssignment_3_1(), "rule__Fsm__TransitionAssignment_3_1");
			builder.put(grammarAccess.getStateAccess().getInitAssignment_2(), "rule__State__InitAssignment_2");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_3(), "rule__State__NameAssignment_3");
			builder.put(grammarAccess.getStateAccess().getEntryNameAssignment_5(), "rule__State__EntryNameAssignment_5");
			builder.put(grammarAccess.getTransitionAccess().getNameAssignment_2(), "rule__Transition__NameAssignment_2");
			builder.put(grammarAccess.getTransitionAccess().getSourceAssignment_3_0(), "rule__Transition__SourceAssignment_3_0");
			builder.put(grammarAccess.getTransitionAccess().getDestinationAssignment_3_2(), "rule__Transition__DestinationAssignment_3_2");
			builder.put(grammarAccess.getTransitionAccess().getTriggerAssignment_4_1(), "rule__Transition__TriggerAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FsmGrammarAccess grammarAccess;

	@Override
	protected InternalFsmParser createParser() {
		InternalFsmParser result = new InternalFsmParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FsmGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FsmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
