/*
 * generated by Xtext 2.25.0
 */
package org.xtext.ice.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fr.ice.fsm.model.Fsm
import java.util.Scanner
import javax.sound.sampled.BooleanControl.Type

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class FsmGenerator extends AbstractGenerator {
	FSMCompiler myCompiler
	FSMInterpreter myInterpreter

	String action = ""

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val myFsm = resource.contents.get(0) as Fsm;
		myCompiler = new fsmJavaCompiler()
		myInterpreter = new FsmScannerInterpreter()

		val mainScanner = new Scanner(System.in)

		switch (action) {
			case "compile":
				fsa.generateFile('main.java', myCompiler.compile(myFsm))
			case "interpret":
				myInterpreter.interpret(myFsm)
			case "":
				action = mainScanner.nextLine()
			default:
				print("action not recognized: use either \"interpret\" or \"compile\"")
		}

	}

}
